% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/transfo_dist.r
\name{transfo_dist}
\alias{transfo_dist}
\title{transfo_dist()}
\usage{
transfo_dist(
  DB,
  index_DB_Y_Z = 1:3,
  quanti = NULL,
  nominal = NULL,
  ordinal = NULL,
  logic = NULL,
  convert_num = NULL,
  convert_clss = NULL,
  prep_choice = "E",
  info = 0.8
)
}
\arguments{
\item{DB}{A data.frame composed of exactly two overlayed databases with a column of database identification, two columns corresponding to a same information
differently encoded in the two databases and covariates. The order of the variables have no importance.}

\item{index_DB_Y_Z}{A vector of exactly three integers. The first integer must correspond to the column index of the database identifier. The second integer corresponds
to the index of the target variable in the first database while the third integer corresponds to the index of column related to the target varaible in the second database.}

\item{quanti}{A vector of integers that corresponds to the indexes of columns of all the quantitative variables (DB identification and target variables included)}

\item{nominal}{A vector of integers that corresponds to the indexes of columns of all the nominal (not ordered) variables (DB identification and target variables included)}

\item{ordinal}{A vector of integers that corresponds to the indexes of columns of all the ordinal variables (DB identification and target variables included)}

\item{logic}{A vector of integers that corresponds to the indexes of columns of all the boolean variables.}

\item{convert_num}{Indexes of the continuous (quantitative) variables to convert in ordered factors. All indexes declared in this argument must have been declared in the argument \code{quanti} (No conversion by default).}

\item{convert_clss}{A vector indicating for each continuous variable to convert, the corresponding number of levels desired.If the length of the argument \code{convert_num} exceeds 1 while the length of \code{convert_clss} equals 1 (only one integer),
each discretization will count the same number of levels.}

\item{prep_choice}{A character (with quotes) corresponding to the distance function chosen between: The euclidean distance ("E", by default), The Manhattan distance ("M"),
the Gower distance ("G"), and the Hamming (also called binary) distance ("H"), calculated from principal components of a factor analysis of mixed data ("FAMD").}

\item{info}{A percetn value (between 0 and 1, 0.8 is the default value) that corresponds to the minimal part of variability that must be taken into account by the remaining principal components of the FAMD when this option is required.
This ratio will fix the number of components to keep with this approach.}
}
\value{
A data.frame which covariates have been transformed according to the distance function or approach (for FAMD) chosen. The columns of the data.frame could have been reordered so that the identifier, Y and Z correspond to the first three columns respectively.
Moreover the order of rows stays unchanged during the process.
}
\description{
This function prepares the database for the resolution of a recoding problem according to the distance function chosen to evaluate the proximities between rows
}
\details{
A. SPECIFIC STRUCTURE REQUIRED FOR THE DATABASE

In input of this function, the declared database must correspond to the fusion of two databases previously overlayed.
This structure can be guaranteed using previously the function \code{\link{merge_dbs}}.
Nevertheless, it is also posible to apply directly the function \code{transfo_dist} on a row database provided that a specific structure of database is respected in entry of the function.
The database must count at least 4 columns (In an a unspecified order of appearance in the database):
\itemize{
\item A column indicating the database identifiers (2 classes: A and B, 1 and 2, ...)
\item A categorical (nominal or ordinal factor) variable corresponding to the outcome of the 1st database (on top) with its specific encoding (called Y by example).
\item A second categorical (nominal or ordinal) variable corresponding to the specific outcome in the 2nd database (called Z by example).
\item At least one covariate shared in the two bases (same encoding in the 2 bases). Incomplete information is possible on shared covariates provided you have more than one covariate.
}
In this context, the information related to Y in the second database must be missing as the information related to Z in the first one.
The indexes of columns related to the database identifier, Y and Z must be specified in this order in the argument \code{index_DB_Y_Z}.
Moreover, all column indexes (including those related to identifier and target variables Y and Z) of the overlayed database (DB) must be declared once (and only once), among the arguments \code{quanti}, \code{nominal}, \code{ordinal}, and \code{logic}.
If the outcomes are of numeric types, they could be declared as quantitative, but they will be automatically convert in ordered factors.


B. TRANSFORMATIONS OF CONTINUOUS COVARIATES

Because some algorithms dedicated to solving recoding problems must run actually without continuous covariates (It is the case of the function \code{OT_joint} of this package), the function \code{transfo_dist} integrates in is syntax
a process dedicated to the discretization of this type of variables. For this, it is necessary to rigorously filled in the arguments \code{convert_num} and \code{convert_clss} as vectors of indexes. The first one informs about the indexes of continuous variables to
transform in ordered factor while the second one specifies the corresponding number of levels desired.
Only covariates can be transformed (not outcomes) and missing informations are not taken into account for the transformations.
Finally, all the indexes informed in the argument \code{convert_num} must also be informed in the argument \code{quanti}.


C. TRANSFORMATIONS ON THE DATABASE ACCORDING TO THE CHOSEN DISTANCE FUNCTION


These necessary transformations are related to the type of each of the covariates.
It depends on the choice of the distance function chooses by user in the \code{prep_choice} option.

1. For the Euclidean ("E") and Manhattan ("M") distances:
All the remaining continuous variables are standardized.
The related recoding to a boolean variable is 1 for \code{TRUE} and 0 for \code{FALSE}.
The recoding for a nominal variable of k classes corresponds to its related disjunctive table (i.e (k-1) binary variables)).
The ordinal variables are all converted to numeric variables (Please take care that the order of the classes of each of these variables is well specified at the beginning).

2. For the Hamming ("H") distance:
All the numeric variables must be transformed beforehand in categorical forms using the internal process described in section B or via another external approach.
The boolean variables are all converted in ordinal forms and then turned into binaries.
The recoding for nominal or ordinal variable of k classes corresponds to its related disjunctive table (i.e (k-1) binary variables)).

3. For the Gower ("G") distance:
All covariates remain unchanged

4. Using the principal components from a factor analysis for mixed data (FAMD):
A factor analysis for mixed data is done on the covariates of the database and a specific number of the related principal components is remained (depending on the minimal part of variability explained by the covariates that the user wishes to keep by varying the \code{info} option).
The function integrates in its syntax the function \code{\link[FactoMineR]{FAMD}} of the package \pkg{FactoMiner} (LÃª, 2008) using default parameters.
After this step, the covariates are replaced by the remaining principal components of the FAMD, and each value corresponds to coordinates linked to each components.
Please notice that this method supposed complete covariates in input, nevertheless in presence of incomplete covariates, each corresponding rows will be dropped from the study, a warning will appear, and the number of remaining rows will be indicated.
}
\examples{

### Using the table simu_data:

data(simu_data)

# 1. the Euclidean distance (same output with Manhattan distance),
try1 = transfo_dist(simu_data,quanti = c(3,8), nominal = c(1,4:5,7),
                    ordinal = c(2,6), logic = NULL, prep_choice = "E")
# Here Yb2 was stored in numeric: It has been automatically converted in factor

# You can also convert beforehand Yb2 in ordered factor by example:
sim_data     = simu_data
sim_data$Yb2 = as.ordered(sim_data$Yb2)
try1 = transfo_dist(sim_data,quanti = 8, nominal = c(1,4:5,7),
                    ordinal = c(2,3,6), logic = NULL, prep_choice = "E")

# 2. The Euclidean distance generated on principal components
#    by a factor analysis for mixed data (FAMD):
try2 = transfo_dist(simu_data,quanti = c(3,8), nominal = c(1,4:5,7),
                    ordinal = c(2,6), logic = NULL, prep_choice = "FAMD")

# Please notice that this method works only with rows that have complete
# information on covariates.

# 3. The Gower distance for mixed data:
try3 = transfo_dist(simu_data,quanti = c(3,8), nominal = c(1,4:5,7),
                    ordinal = c(2,6), logic = NULL, prep_choice = "G")

# 4. The Hamming distance:
# Here the quanti option could only contain indexes related to targets.
# Column indexes related to potential binary covariates or covariates with
# finite number of values must be include in the ordinal option.
# So in simu_data, the discretization of the variable age is required (index=8),
# using the convert_num and convert_clss arguments (for tertiles = 3):

try4 = transfo_dist(simu_data,quanti = c(3,8), nominal = c(1,4:5,7),ordinal = c(2,6),
convert_num = 8, convert_clss = 3, prep_choice = "H")

\dontrun{
# Other situation with a new numeric covariate with a finite number of values
simu_dat = simu_data[,-8]
simu_dat$new = sample(1:3,nrow(simu_data),replace = TRUE)
try5 = transfo_dist(simu_dat,quanti = c(3,8), nominal = c(1,4:5,7),ordinal = c(2,6),
prep_choice = "H")
# Return Error because a continuous variable remains
}

### This function works whatever the order of your columns in your database:
# Suppose that we re-order columns in simu_data:
simu_data2 = simu_data[,c(2,4:7,3,8,1)]

# By changing the corresponding indexes in the index_DB_Y_Z option,
# we observe the desired output:
try5 = transfo_dist(simu_data2,index_DB_Y_Z = c(8,1,6),quanti = 6:7, nominal = c(2:3,5,8),
                     ordinal = c(1,4), logic = NULL, prep_choice = "E")

}
\references{
### For Factor Analysis with mixed data:
\itemize{
\item Pages J. (2004). Analyse factorielle de donnees mixtes. Revue Statistique Appliquee. LII (4). pp. 93-111.
\item LÃª S, Josse J, Husson, F. (2008). FactoMineR: An R Package for Multivariate Analysis. Journal of Statistical Software. 25(1). pp. 1-18.
}
### About the Gower distance:
\itemize{
\item Gower, J. C. (1971), âA general coefficient of similarity and some of its propertiesâ. Biometrics, 27, 623--637.
}
### About the other distance measurements:
\itemize{
\item Anderberg, M.R. (1973), Cluster analysis for applications, 359 pp., Academic Press, New York, NY, USA.
\item Borg, I. and Groenen, P. (1997) Modern Multidimensional Scaling. Theory and Applications. Springer.
}
}
\seealso{
\code{\link{transfo_quali}},\code{\link{merge_dbs}}
}
\author{
Gregory Guernec
\email{otrecod.pkg@gmail.com}
}
