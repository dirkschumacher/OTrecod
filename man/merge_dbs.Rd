% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/merge_dbs.r
\name{merge_dbs}
\alias{merge_dbs}
\title{merge_dbs()}
\usage{
merge_dbs(DB1, DB2, NAME_Y1, NAME_Y2, order_levels_Y1 = levels(DB1[,
  NAME_Y1]), order_levels_Y2 = levels(DB2[, NAME_Y2]),
  ordinal_DB1 = FALSE, ordinal_DB2 = FALSE, impute = "NO",
  R_MICE = 5, NCP_MDA = 3, seed_func = sample(1:1e+06, 1))
}
\arguments{
\item{DB1}{A data.frame corresponding to the 1st DB to match}

\item{DB2}{A data.frame corresponding to the 2nd DB to match}

\item{NAME_Y1}{Name of the outcome (with quotes) in its specific scale/encoding gathered from the 1st DB}

\item{NAME_Y2}{Name of the outcome (with quotes) in its specific scale/encoding gathered from the 2nd DB}

\item{order_levels_Y1}{To complete only if Y is considered as an ordinal factor (scale). A vector of labels of levels (with quotes) sorted in ascending order in DB1}

\item{order_levels_Y2}{To complete only if Y is considered as an ordinal factor.A vector of labels of levels sorted in ascending order in DB2 with different scale from DB1}

\item{ordinal_DB1}{Vector of number of columns corresponding to ordinal variables in DB1 (No variable by default)}

\item{ordinal_DB2}{Vector of number of columns corresponding to ordinal variables in DB2 (No variable by default)}

\item{impute}{NO imputation on covariates (By default), CC (for Complete Case), MICE (For MICE multiple imputation), MDA (for single imputation using Factorial Analysis for Mixed Data)}

\item{R_MICE}{Number of multiple imputations for MICE only (5 by default)}

\item{NCP_MDA}{Integer corresponding to the number of components used to predict NA in MDA imputation (3 by default)}

\item{seed_func}{Integer used as argument by the set.seed() for offsetting the random number generator (Random integer by default)}
}
\value{
A list containing 10 elements (11 if impute = "MICE"):

        DB_READY The database matched from the 2 initial BDDs with common covariates and imputed or not accordind to the impute option.
        Y1_LEVELS Levels retained for the target variable in the DB1.
        Y2_LEVELS Levels retained for the target variable in the DB2.
        REMOVE1 Labels of deleted covariates because of their different types from DB1 to DB2
        REMOVE2 Removed factor(s) because of their different levels from DB1 to DB2
        REMAINING_VAR Labels of the covaraites remained for the fusion with OT algorithm
        IMPUTE_TYPE Method chosen to handle missing data in covariates
        MICE_DETAILS A list containing the details of the MICE imputation. Databases imputed for DB1 and DB2 according to the number of mutliple imputation selected (Only if impute = "MICE").
        DB1_RAW A data.frame corresponding to the 1st raw database
        DB2_RAW A data.frame corresponding to the 2nd raw database
        SEED An integer used as argument by the set.seed() for offsetting the random number generator (random selection by default)
}
\description{
A function which merge vertically two databases by selecting the common covariates with a variable Y encoded
}
\examples{
# Require samp.A database from the StatMatch package. c.neti and c.neti.bis coded voluntarily in 2 distinct encodings.
library(StatMatch)
data(samp.A)
samp.A = samp.A[,c(1:11,13,12)]
c.neti            = as.numeric(samp.A$c.neti)

samp.A$c.neti.bis = as.factor(ifelse(c.neti \%in\% c(1,2),1,
                                    ifelse(c.neti \%in\% c(3,4),2,
                                           ifelse(c.neti \%in\% c(5,6),3,4))))
data1 = samp.A[1:1000,c(2:9,13)]
data2 =samp.A[1001:nrow(samp.A),c(5:11,12,14)]

# Insert the variable marital in 2 different types:
data1$marital = as.numeric(data1$marital)

# Insert different levels in a factor variable:
data2$c.age = as.character(data2$c.age)
data2$c.age[data2$c.age \%in\% c("[16,34]","(34,44]")] = "[16,44]"
data2$c.age = as.factor(data2$c.age)

# Add NA in covariates:
add_NA = function(DB,tx){
DB_NA = DB
for (j in 1:ncol(DB)){
   NA_indic = sample(1:nrow(DB),round(nrow(DB)*tx/100),replace=FALSE)
   DB_NA[NA_indic,j] = rep(NA,length(NA_indic))
 }
 return(DB_NA)
}

set.seed(4036); data3 = add_NA(data1,10); data4 = add_NA(data2,10)
soluc1  = merge_dbs(data3,data4,NAME_Y1 = "c.neti",NAME_Y2 = "c.neti.bis",ordinal_DB1 = c(2,4,6,9), ordinal_DB2 = c(1,3,9), impute = "MICE",R_MICE = 2, seed_func = 4036)
soluc2  = merge_dbs(data3,data4,NAME_Y1 = "c.neti",NAME_Y2 = "c.neti.bis",ordinal_DB1 = c(2,4,6,9), ordinal_DB2 = c(1,3,9), impute = "NO")
soluc3  = merge_dbs(data3,data4,NAME_Y1 = "c.neti",NAME_Y2 = "c.neti.bis",ordinal_DB1 = c(2,4,6,9), ordinal_DB2 = c(1,3,9), impute = "CC")
soluc4  = merge_dbs(data3,data4,"c.neti","c.neti.bis", order_levels_Y1 = NULL, order_levels_Y2 = NULL, ordinal_DB1 = c(2,4,6,9), ordinal_DB2 = c(1,3,9), impute = "MDA", NCP_MDA = 3)
soluc5  = merge_dbs(data1,data2,NAME_Y1 = "c.neti",NAME_Y2 = "c.neti.bis",ordinal_DB1 = c(2,4,6,9), ordinal_DB2 = c(1,3,9), impute = "MICE")
soluc6  = merge_dbs(data3,data4,NAME_Y1 = "c.neti",NAME_Y2 = "c.neti.bis",order_levels_Y2 = c("4","1","3","2"),ordinal_DB1 = c(2,4,6,9), ordinal_DB2 = c(1,3,9), impute = "NO")


}
